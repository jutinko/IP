#ifndef GRID_HPP
#define GRID_HPP

#include <list>
#include <unordered_set>
#include "SpatialObject.hpp"
#include "SpatialQuery.hpp"
#include "Vertex.hpp"
#include <vector>

#define DEFAULT_SIZE 50
#define DEFAULT_RANGE_LOWER_BOUND 0
#define DEFAULT_RANGE_UPPER_BOUND 1000

using namespace std;

namespace IP
{
  struct VertexHash 
  {
    size_t operator()(const FLAT::Vertex& k) const
    {
      return hash<double>()(k.Vector[0])^hash<double>()(k.Vector[1])^hash<double>()(k.Vector[2]);
    }
  };

  struct VertexEqual 
  {
    bool operator()(const FLAT::Vertex& lhs, const FLAT::Vertex& rhs) const
    {
      return lhs.Vector[0] == rhs.Vector[0] && lhs.Vector[1] == rhs.Vector[1] 
        && lhs.Vector[2] == rhs.Vector[2];
    }
  };

  class Grid
  {
    public:
      Grid();
      Grid(int, int, int); 
      Grid(int, int, int, double, double); 
      void insert(FLAT::Vertex&);
      vector<vector<int>> findNeighbourWithRadius(vector<int>, int);
      void kNNQuery(FLAT::SpatialQuery&, vector<FLAT::Vertex>&);
      //void kNNQuery(FLAT::Vertex&, vector<FLAT::Vertex>&);
      bool find(FLAT::Vertex&);
      // Move to private methods later
      void putSetIntoVector(vector<FLAT::Vertex>&,
          unordered_set<FLAT::Vertex, VertexHash, VertexEqual>&);
      vector<int> getCellCoordinates(FLAT::Vertex&);
      unordered_set<FLAT::Vertex, VertexHash, VertexEqual>* getCell(FLAT::Vertex& v);
      FLAT::spaceUnit distancePointToAxisAlignedCube(FLAT::Vertex, vector<int>);
      double cellUnit;
      double range_lower, range_upper;
    private:
      int x, y, z;
      // This assumes that the cells are cubic
      
      unordered_set<FLAT::Vertex, VertexHash, VertexEqual>**** grid;
      bool isValidCell(bool, vector<int>, vector<int>, int);
      vector<FLAT::Vertex> getVerticesOfCell(vector<int>);
      double findMinDintanceToNeighbourCells(FLAT::Vertex&, vector<vector<int>>&);
  };
}

#endif
